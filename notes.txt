https://www.bilibili.com/video/BV1jS421d7bL?spm_id_from=333.788.player.switch&vd_source=6ff832c6907419d7da467346d3467ef1&p=14

swagger: http://127.0.0.1:8000/docs 


# project 1
uvicorn books:app --reload

# 007
static parameter @app.get("/books/{book_title}") -- find things
dynamic parameter(path parameter which get passed through URL)
%20 means space in URL " "

# 008
query parameter @app.get("/books/") -- filter things

# 010 
post request method -- create things

# 011
put request method -- update things


# project 2
uvicorn books2:app --reload

# 005
pydantics -- a python library that helps you validate data and serialize it to JSON

#018
status code 


==============================
📘 Full Stack Flow Diagram
==============================

1. User opens webpage → requests page

   Browser accesses URL (e.g., /todo-page)
        ↓
   FastAPI receives GET request → queries database and processes
        ↓
   Jinja renders HTML on the server side and injects data
        ↓
   FastAPI returns the full HTML page to the browser
        ↓
   Browser starts rendering the page
        ↓
      - HTML: displays the page structure
      - CSS: loads stylesheets → beautifies the page
      - JavaScript: loads scripts → prepares to listen for user actions
        ↓
   User interacts: clicks buttons / submits forms / types input
        ↓
   JavaScript captures the event → sends HTTP request using fetch() or axios
        ↓
   FastAPI receives POST/GET request from JS → validates, queries, updates
        ↓
   FastAPI returns a JSON response or status code
        ↓
   JavaScript receives the response → dynamically updates the page or redirects

---------------------------------------
📌 Explanations (Jinja, JS, FastAPI roles)
---------------------------------------

① Jinja runs only once when the backend renders the page
   - Final output is plain HTML (all variables are replaced with values)
   - There is no Jinja in the browser, only rendered HTML

② JavaScript is the only “actor” in the browser
   - Listens to user actions (clicks, inputs, submits, etc.)
   - Actively sends HTTP requests (usually with fetch)
   - Can include token, cookie, header, and other custom data
   - Serves as the bridge between frontend and FastAPI backend

③ FastAPI routes are separated by request method
   - GET: returns page (usually rendered with Jinja)
   - POST / PUT / DELETE: handles data interactions (usually receives and returns JSON) — typically requires JavaScript

④ Page refresh vs. partial update
   - If the browser thinks you are navigating to another page → it will refresh
   - Only JavaScript can send requests without refreshing the page (AJAX)
   - Jinja/FastAPI's HTML response is meant for full-page rendering, not partial updates

⑤ When the browser automatically sends a request:
   - Navigating to a link (GET request with path and query parameters)
   - Submitting a traditional HTML <form> (non-JSON)

   For all other “custom data structures” (e.g., Pydantic models, JWT, cookie control, async behavior),
   if you want to avoid a page refresh,
   you must use JavaScript to control the request's method, content, and headers.

   If you want the backend to receive actual JSON data (not query parameters or form data),
   it must be sent manually via JavaScript (or another client tool).
